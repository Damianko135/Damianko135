# GitHub Actions Workflow for Dockerizing Application
name: CI/CD Pipeline for Docker

# Trigger workflow on:
# 1. Pushes to main branch
# 2. Pull requests to main branch
# 3. Manual workflow dispatch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - uses: actions/checkout@v4
      # Lint the Dockerfile to ensure it follows best practices
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v2
        with:
          path: Dockerfile

  scan:
    name: Scan Docker Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: lint
    steps:
      # Checkout the repository code
      - uses: actions/checkout@v4
      # Set up Docker Buildx for advanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Build the Docker image using Buildx
      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: my-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # Scan the Docker image for vulnerabilities using Trivy
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@v0.2.0
        with:
          image-ref: my-image:latest

  test:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: scan
    steps:
      # Checkout the repository code
      - uses: actions/checkout@v4
      # Set up Docker Buildx for advanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Build the Docker image using Buildx
      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: my-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # Run tests using Docker Compose
      - name: Test Docker Container
        run: docker compose up --build --abort-on-container-exit

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout the repository code
      - uses: actions/checkout@v4
      # Set up Docker Buildx for advanced build capabilities
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Login to Docker Registry using repository variables and secrets
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      # Generate a semantic version number based on GitHub run number
      - name: Generate Semantic Version
        id: semver
        shell: bash
        run: |
          # Calculate semantic version based on GitHub run number
          # This creates a unique version like 1.2.34 where:
          # - 1 = Major version (thousands place)
          # - 2 = Minor version (hundreds place)
          # - 34 = Patch version (last two digits)
          RUN_NUMBER=${{ github.run_number }}
          MAJOR=$((RUN_NUMBER / 1000))
          MINOR=$(((RUN_NUMBER % 1000) / 100))
          PATCH=$((RUN_NUMBER % 100))
          VERSION="${MAJOR}.${MINOR}.${PATCH}"

          # Convert repository name to lowercase for Docker tag
          # Ensures consistent tag naming across different repositories
          REPO_LC="${GITHUB_REPOSITORY,,}"

          echo "Calculated version: ${VERSION}"
          # Output version and lowercase repo name for use in subsequent steps
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "REPO_LC=${REPO_LC}" >> $GITHUB_OUTPUT
      # Build and push Docker image with multiple tags and platform support
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          # Use current directory as build context
          context: .
          # Push the image only if the event is not a pull request
          push: ${{ github.event_name != 'pull_request' }}
          # Load the image only if the event is a pull request
          load: ${{ github.event_name == 'pull_request' }}
          # Tag the image with:
          # 1. 'latest' tag
          # 2. Current commit SHA
          # 3. Semantic version from the previous step
          tags: |
            ${{ steps.semver.outputs.REPO_LC }}:latest
            ${{ steps.semver.outputs.REPO_LC }}:${{ github.sha }}
            ${{ steps.semver.outputs.REPO_LC }}:${{ steps.semver.outputs.version }}
          # Build for both AMD64 and ARM64 platforms
          platforms: linux/amd64,linux/arm64
          # Use GitHub Actions cache for build optimization
          cache-from: type=gha
          cache-to: type=gha,mode=max
